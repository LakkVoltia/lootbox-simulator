using System.Reflection.Emit;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Channels;
using LootBoxSimulator.Models.DAO;
using Microsoft.EntityFrameworkCore;
using System.Drawing;
using System;

RemoteDatabaseContext db = new RemoteDatabaseContext();
StringBuilder stringBuilder = new StringBuilder();
stringBuilder.Append("1. Print category");
stringBuilder.AppendLine();
stringBuilder.Append("2. Print rate");
stringBuilder.AppendLine();
stringBuilder.Append("3. Print items");
stringBuilder.AppendLine();
stringBuilder.Append("4. change category");
stringBuilder.AppendLine();
stringBuilder.Append("5. change rate");
stringBuilder.AppendLine();
stringBuilder.Append("6. change item");
stringBuilder.AppendLine();
stringBuilder.Append("7. return categoryid");
stringBuilder.AppendLine();
stringBuilder.Append("8. return rateid");
stringBuilder.AppendLine();
stringBuilder.Append("9. return itemid");
stringBuilder.AppendLine();
stringBuilder.Append("10. AddCategory");
stringBuilder.AppendLine();
stringBuilder.Append("11.AddRate ");
stringBuilder.AppendLine();
stringBuilder.Append("12.AddItem ");
stringBuilder.AppendLine();
stringBuilder.Append("13.ItemRandom ");
stringBuilder.AppendLine();
stringBuilder.Append("14.MultiBow ");
stringBuilder.AppendLine();
stringBuilder.Append("15.LootBoxItems");
stringBuilder.AppendLine();
stringBuilder.Append("16.createLootBox");
stringBuilder.AppendLine();
stringBuilder.Append("17.RenameLootBox");
stringBuilder.AppendLine();
stringBuilder.Append("18.AddLootBoxItem");
stringBuilder.AppendLine();
stringBuilder.Append("19.OpenLootBox");
stringBuilder.AppendLine();





Console.WriteLine(stringBuilder.ToString());
if (!int.TryParse(Console.ReadLine(), out int menuPosition))
{
    Console.WriteLine("Please enter a valid number");
    return;
}

switch (menuPosition)
{
    case 1:
        foreach (var categoryDao in db.Categories)
        {
            Console.WriteLine($"Id: {categoryDao.Id} Name: {categoryDao.Name}");
        }
        break;


    case 2:

        foreach (var RateDao in db.Rates)
        {
            Console.WriteLine($"Id: {RateDao.Id} Name: {RateDao.Name} Rate: {RateDao.Rate}");
        }
        break;


    case 3:PrintItems(); break;
case 4: ChangeCategory(); break;
    case 5:  ChangeRate(); break;
    case 6: ChangeItem(); break;
        case 7: RemoveCategory(); break;    
        case 8: RemoveRate(); break;
    case 9: RemoveItem(); break;
    case 10: AddCategory(); break;
    case 11: AddRate(); break;
    case 12: AddItem(); break;
        case 13: ItemRandom (1); break;
    case 14: MultiBow (); break; 
      case 15: LootBoxItems(); break;
    case 16: CreateLootBox (); break;  
        case 17: RenameLootBox ();break;
    case 18: AddLootBoxItem();break;
    case 19: OpenLootBox(); break;
    default:
        Console.WriteLine("Unknow menu position");
        break;  
}

void PrintItems()
{
    foreach (var ItemDao in db.Items.Include(x => x.Category).Include(r => r.Rate))
    {
        Console.WriteLine($"Id: {ItemDao.Id} Name: {ItemDao.Name} RateId: {ItemDao.Rate.Name}");
        Console.WriteLine($"Description; {ItemDao.Description}");
        Console.WriteLine($"Url: {ItemDao.Url} CategoryId: {ItemDao.Category.Name} RateId: {ItemDao.Rate.Name} ");
    }

}
void ChangeCategory()
{
    if (!int.TryParse(Console.ReadLine(), out int CategoryID)) return;
    String CategoryName = Console.ReadLine();
    if (String.IsNullOrEmpty(CategoryName)) return;
    var categoryDao = db.Categories.Find(CategoryID);
    categoryDao.Name = CategoryName;
    db.SaveChanges();
}
void ChangeRate()
{
   
    if (!int.TryParse(Console.ReadLine(), out int RateID)) return;
    String RateName = Console.ReadLine();
    if (String.IsNullOrEmpty(RateName)) return;
    var RateDao = db.Rates.Find(RateID);
    RateDao.Name = RateName;
    db.Rates.Update(RateDao);

    db.SaveChanges();
}
void ChangeItem()
{
   
    if (!int.TryParse(Console.ReadLine(), out int ItemID)) return;
    String ItemName = Console.ReadLine();
    if (String.IsNullOrEmpty(ItemName)) return;
    var ItemDao = db.Items.Find(ItemID);
    ItemDao.Name = ItemName;
    db.Items.Update(ItemDao);
}
void RemoveCategory()
{
    Console.WriteLine("Please enter a Category ID to remove");
    if (!int.TryParse(Console.ReadLine(), out int CategoryID)) return;
    var categoryDao = db.Categories.Find(CategoryID);
    db.Categories.Remove(categoryDao);
    db.SaveChanges();
}
void RemoveItem()
{
    Console.WriteLine("Please enter a Item ID to remove");
    if (!int.TryParse(Console.ReadLine(), out int ItemID)) return;
    var itemDao = db.Items.Find(ItemID);
    db.Items.Remove(itemDao);
    db.SaveChanges();
}
void RemoveRate()
{
    Console.WriteLine("Please enter a Rate ID to remove");
    if (!int.TryParse(Console.ReadLine(), out int RateID)) return;
    var rateDao = db.Rates.Find(RateID);
    db.Rates.Remove(rateDao);
    db.SaveChanges();
}
void AddCategory()
{
    Console.WriteLine("Please enter a Category Name for new category");
    String CategoryName = Console.ReadLine();
    if (String.IsNullOrEmpty(CategoryName)) return;
    CategoryDao categoryDao = new CategoryDao();
    categoryDao.Name = CategoryName;
    db.Categories.Add(categoryDao);
    db.SaveChanges();
}

void AddRate()
{
    Console.WriteLine("Please enter a Rate Name for new Rate");
    String RateName = Console.ReadLine();
    if (String.IsNullOrEmpty(RateName)) return;
    if (!Decimal.TryParse(Console.ReadLine(), out Decimal Rate)) return;
    String RateColor = Console.ReadLine();
    if (String.IsNullOrEmpty(RateColor)) return;
    RateDao RateDao = new RateDao();
    RateDao.Name = RateName;
    RateDao.Rate = Rate;
    RateDao.Color = RateColor;
    db.Rates.Add(RateDao);
    db.SaveChanges();
}



void AddItem()
{
    Console.WriteLine("Please enter a Item Name for new Item");
    String ItemName = Console.ReadLine();
    if (String.IsNullOrEmpty(ItemName)) return;

    Console.WriteLine("Please enter a Item Url for new Item");
    String ItemUrl = Console.ReadLine();
    if (String.IsNullOrEmpty(ItemUrl)) return;

    Console.WriteLine("Please enter a Item Description for new Item");
    String ItemDiscription = Console.ReadLine();
    if (String.IsNullOrEmpty(ItemDiscription)) return;

    Console.WriteLine("Please enter a Item Description for new Item");
    String ItemId = Console.ReadLine();
    if (String.IsNullOrEmpty(ItemId)) return;

    ItemDao ItemDao = new ItemDao();
    ItemDao.Name = ItemName;
    ItemDao.Description = ItemDiscription;
    ItemDao.Url = ItemUrl;
    db.Items.Add(ItemDao);
    db.SaveChanges();
}
void ItemRandom (decimal min)
{
    {
        foreach (var ite in db.Rates.OrderByDescending(moana => moana.Rate))
        {
            Console.WriteLine(ite.Rate);
        }
    }

    RemoteDatabaseContext databaseContext = new RemoteDatabaseContext();



    var result = RandomizeRate();
    var item = RandomizeItem(result);
    Console.WriteLine($"{item?.Name} {item?.Id}");

    ItemDao? RandomizeItem(RateDao? rateDao)
    {
        if (rateDao == null) return null;
        var items = databaseContext.Items
            .Where(item =>
                item.Rate.Id == rateDao.Id
                ).ToList();
        if (items.Count == 0) return null;
        Random random = new Random();
        int randomIndex = random.Next(0, items.Count);
        return items[randomIndex];
    }


    RateDao? RandomizeRate()
    {
        decimal Sum = databaseContext.Rates.Select(item => item.Rate).Sum();

        if (Sum == 1)
        {
            {
                var rates = databaseContext
                    .Rates
                    .OrderByDescending(item => item.Rate).ToList();
                if (rates.Count == 0) return null;
                decimal start = 0;
                decimal end = rates[0].Rate;
                Random random = new Random();
                decimal number = Convert.ToDecimal(random.NextDouble());
                for (var i = 0; i < rates.Count; i++)
                {
                    if (number >= start && number <= end)
                    {
                        Console.WriteLine($"{number} {start} {end}");
                        return rates[i];
                    }

                    start = end;
                    end += rates[i].Rate;
                }
                return null;
            }

        }
        else return null;
    }
   
}
void MultiBow()
{
    Console.Write("Please enter a number of rolls: ");
    int numberOfRolls = int.Parse(Console.ReadLine());
    if (numberOfRolls <= 0)
    {
        Console.WriteLine("Number of rolls must be greater then 0.");
        return;
    }

    for (int i = 0; i < numberOfRolls; i++)
    {
        ItemRandom(1);
    }

}
void LootBoxItems
    ()
{
    Console.WriteLine("Please enter the Lootbox ID:"); if (!int.TryParse(Console.ReadLine(), out int lootboxId))
    {
        Console.WriteLine("Error: Invalid Lootbox ID format.");
        return;
    }
    var lootbox = db.LootBoxes
        .Include(it => it.Items).ThenInclude(item => item.Category)
         .Include(it => it.Items).ThenInclude(item => item.Rate)
            .FirstOrDefault(lootbox => lootbox.Id == lootboxId);
    if (lootbox == null)
    {
        Console.WriteLine($"Error: Lootbox with ID {lootboxId} not found.");
        return;
    }
    if (lootbox.Items == null || lootbox.Items.Count == 0)
    {
        Console.WriteLine($"Error: Lootbox with ID {lootboxId} has no items.");
        return;
    }
    Console.WriteLine($"Items in Lootbox with ID {lootboxId}:");
    foreach (var item in lootbox.Items)
    {
        var rate= db.Rates.FirstOrDefault(r => r.Id == item.Rate.Id);
        if (rate == null)
        {
            Console.WriteLine($"Error: Rarity with ID {item.Rate} not found."); continue;
        }
        else
        {
            Console.WriteLine($"{item.Id}, {item.Name}, {item.Category.Name} ");
            Console.WriteLine($"{item.Description}");
            Console.WriteLine($"{rate.Name}, {rate.Rate}"); Console.WriteLine();
            
            
        }
    }
}
void CreateLootBox()
{
        Console.WriteLine("Please enter a LootBox name: ");
        string LootBoxName = Console.ReadLine();
        if (string.IsNullOrEmpty(LootBoxName)) return;
        LootBoxDao LootBoxDao = new LootBoxDao();
        LootBoxDao.Name = LootBoxName;

    Console.WriteLine("Enter items description: ");
    string LootBoxDescription = Console.ReadLine();
    if (string.IsNullOrEmpty(LootBoxDescription)) return;
    LootBoxDao.Description = LootBoxDescription;

    Console.WriteLine("Enter number of items: ");
        string LootBoxItemsNum = Console.ReadLine();
        if (string.IsNullOrEmpty(LootBoxItemsNum)) return;
        LootBoxDao.ItemNum = int.Parse(LootBoxItemsNum);

       

        db.LootBoxes.Add(LootBoxDao);
        db.SaveChanges();
    }

void AddLootBoxItem()
{
    Console.WriteLine("Please enter items ID: ");
    int.TryParse(Console.ReadLine(), out int itemId);
    Console.WriteLine("Please enter LootBox ID: ");
    int.TryParse(Console.ReadLine(), out int lootBoxId);

    var lootbox = db.LootBoxes.FirstOrDefault(lb => lb.Id == lootBoxId);
    var item = db.Items.FirstOrDefault(i => i.Id == itemId);

    if (lootbox != null && item != null)
    {
        if (lootbox.Items == null)
        {
            lootbox.Items = new List<ItemDao>();
        }

        if (!lootbox.Items.Any(x => x.Id == itemId))
        {
            lootbox.Items.Add(item);
            db.SaveChanges();
        }
    }
}




void RenameLootBox()
{
        if (!int.TryParse(Console.ReadLine(), out int LootBoxID)) return;
        String LootBoxName = Console.ReadLine();
        if (String.IsNullOrEmpty(LootBoxName)) return;
        var LootBoxDao = db.LootBoxes.Find(LootBoxID);
        LootBoxDao.Name = LootBoxName;
        db.SaveChanges();
    }
void OpenLootBox()
{
    Console.WriteLine("Please enter the Lootbox ID:");
        if (!int.TryParse(Console.ReadLine(), out int lootboxId))
        {
            Console.WriteLine("Error: Invalid Lootbox ID format.");
            return;
        }

    var lootbox = db.LootBoxes
           .Include(it => it.Items).ThenInclude(item => item.Category)
            .Include(it => it.Items).ThenInclude(item => item.Rate)
               .FirstOrDefault(lootbox => lootbox.Id == lootboxId);


    if (lootbox == null)
        {
            Console.WriteLine($"Error: Lootbox with ID {lootboxId} not found.");
            return;
        }

        if (lootbox.Items == null || lootbox.Items.Count == 0)
        {
            Console.WriteLine($"Error: Lootbox with ID {lootboxId} has no items.");
            return;
        }

        Random rnd = new Random();
        int index = rnd.Next(lootbox.Items.Count);
        var item = lootbox.Items[index];


        Console.ForegroundColor = GetConsoleColor(item.Rate.Color);
        Console.WriteLine($"{item.Id}, {item.Name}, {item.Category.Name}");
        Console.ResetColor();

        Console.WriteLine($"{item.Description}");
        Console.WriteLine($"{item.Rate.Name}, {item.Rate.Rate}");
    }
     static ConsoleColor GetConsoleColor(string colorName)
    {
        return colorName.ToLower() switch
        {
            "orange" => ConsoleColor.DarkYellow,
            "gray" => ConsoleColor.Gray,
            "yellow" => ConsoleColor.Yellow,
            "purple" => ConsoleColor.Magenta,
            _ => ConsoleColor.White,
        };
    }
